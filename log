ESTIMATE of time to complete assignment: 16.5 hours

      Time     Time
Date  Started  Spent Work completed
----  -------  ----  --------------
12/1  8:00pm   2:00  Began implementing pointset_create and pointset_add
12/2  7:00pm   4:00  Started implementing a recursive algorithm for dividing
                     the list of points to be added to the quadtree. Implemented
                     a recursive destroy function. Began debugging test cases.
12/3  4:00pm   5:00  Finished implementing recursive create function for
                     pointset_create, began debugging valgrind errors. Implemented
                     pointset_for_each and started implementing nearest_neighbor
                     algorithm.
12/4  6:00pm   5:00  Added regions and functions to calculate regions for each
                     quadrant for each of the pointnodes in the pointset. Began
                     implementing priority queue using a heap ADT. Added an ID
                     struct member to pqueue in order to determine whether entry
                     is a point2d or a pointnode.
10/11 9:00pm   4:30  Finished working on and debugging nearest_neighbor. Finished
                     implementing k_nearest_neighbor and heap implementation.
                     Debugged issue with casting dequeued element to the wrong
                     pointer type
10/12 7:00pm   2:00  Fixed the remaining memory leaks. Finally debugged issue
                     with blotto.c slighly miscalculating average wins for
                     players.

               ----
               16:30  TOTAL time spent

While the implementations of gmap.c were relatively straightforward, the blotto
program was significanlty more difficult to implement, since it involved figuring
out how to properly interface with the gmap hash table in order to accomplish the
task.

I initially decided to modify entry.c to accept strings of the lines of the file,
before realising that this was unnecessary since stdin can be inputted as a file.

I struggled the most with figuring out why qsort was not sorting keys based on the scores/wins. It turned out to be an improper pointer conversion from *void to *char using *(char **) typecast instead of just (char *).

I also struggled with resolving valgrind memory leak issues, as I would sometimes make a fatal error and cause most of the test cases to segmentation fault.